/*
 * Copyright (C) 2022 Apple Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS''
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

[
    ReturnsPromiseWhenCallbackIsOmitted,
] interface WebExtensionAPIRuntime {

    [URL, ConvertNullStringTo=Null, RaisesException] DOMString getURL(DOMString resourcePath);

    [NSDictionary] any getManifest();

    [NeedsScriptContext] double getFrameId(any target);

    [NeedsFrame, ProcessArgumentsLeftToRight, RaisesException] void sendMessage([Optional] DOMString extensionId, [Serialization=JSON] any message, [Optional, NSDictionary] any options, [Optional, CallbackHandler] function callback);

    [NeedsFrame] WebExtensionAPIPort connect([Optional] DOMString extensionId, [Optional, NSDictionary] any connectInfo);

    [ImplementedAs=runtimeIdentifier] readonly attribute DOMString id;

    readonly attribute WebExtensionAPIEvent onConnect;
    readonly attribute WebExtensionAPIEvent onMessage;

    [MainWorldOnly, NeedsFrame] void getBackgroundPage([Optional, CallbackHandler] function callback);

    [MainWorldOnly] void setUninstallURL([URL] DOMString url, [Optional, CallbackHandler] function callback);

    [MainWorldOnly, NeedsFrame] void openOptionsPage([Optional, CallbackHandler] function callback);
    [MainWorldOnly, NeedsFrame] void reload();
    [MainWorldOnly] void getPlatformInfo([Optional, CallbackHandler] function callback);

    [MainWorldOnly] readonly attribute WebExtensionAPIEvent onConnectExternal;
    [MainWorldOnly] readonly attribute WebExtensionAPIEvent onMessageExternal;
    [MainWorldOnly] readonly attribute WebExtensionAPIEvent onStartup;
    [MainWorldOnly] readonly attribute WebExtensionAPIEvent onInstalled;

    [MainWorldOnly] readonly attribute any lastError;

    [MainWorldOnly, Dynamic, NeedsFrame] void sendNativeMessage([Optional] DOMString applicationID, [NSObject] any message, [Optional, CallbackHandler] function callback);
    [MainWorldOnly, Dynamic, NeedsFrame] WebExtensionAPIPort connectNative([Optional] DOMString applicationID);

};
